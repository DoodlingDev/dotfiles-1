Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-ruby/vim-ruby'

Plug 'nanotech/jellybeans.vim'
Plug 'christoomey/vim-system-copy'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-rsi'
Plug 'nelstrom/vim-visual-star-search'
Plug 'tpope/vim-vinegar'

" My local plugins, prototypes and/or testing against local branches
Plug '~/code/vim/trusted-local' " christoomey/vim-trusted-local
Plug '~/code/vim/quicklink' " christoomey/vim-quicklink
Plug '~/code/vim/sort-motion' " christoomey/vim-sort-motion
Plug '~/code/vim/titlecase' " christoomey/vim-titlecase
let g:titlecase_map_keys = 0
nmap <leader>gt <Plug>Titlecase
vmap <leader>gt <Plug>Titlecase
nmap <leader>gT <Plug>TitlecaseLine


Plug '~/code/vim/tmux-navigator' " Plug 'christoomey/vim-tmux-navigator'
Plug '~/code/vim/tmux-runner' " Plug 'christoomey/vim-tmux-runner'
nnoremap <leader>va :VtrAttachToPane<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>
noremap <C-f> :VtrSendLinesToRunner<cr>






Plug 'tpope/vim-commentary'


" CUSTOM TEXT OBJECTS!!!!!

Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-entire'


Plug 'gabebw/vim-spec-runner'
map <leader>t <Plug>RunFocusedSpec

Plug 'nelstrom/vim-markdown-folding'

Plug 'mattn/emmet-vim'
let g:user_emmet_leader_key = '<c-e>'


Plug 'mustache/vim-mustache-handlebars'

Plug '~/code/vim/conflicted' " christoomey/vim-conflicted
" set stl+=%{ConflictedVersion()}
nnoremap <leader>gnc :GitNextConflict<cr>

Plug 'mileszs/ack.vim'

nmap <LEADER>ck :Ack!<space>
nnoremap <leader>cc :cclose<cr>

function! s:VisualAck()
  let temp = @"
  normal! gvy
  let escaped_pattern = escape(@", "[]().*")
  let @" = temp
  execute "Ack! '" . escaped_pattern . "'"
endfunction

nnoremap K :Ack! '<C-r><C-w>'<cr>
vnoremap K :<C-u>call <sid>VisualAck()<cr>

let g:ackprg = 'ag --nogroup --nocolor --column'


Plug 'junegunn/vim-easy-align'
command! ReformatTable normal vip<cr>**|
nmap <leader>rt :ReformatTable<cr>
vmap <cr> <Plug>(EasyAlign)

" Folding configurations
"------------------------

"Enable indent folding
set foldenable
set foldmethod=indent
set foldlevel=999

" So I never use s, and I want a single key map to toggle folds, thus
" lower s = toggle <=> upper S = toggle recursive
nnoremap <leader>ff za
nnoremap <leader>FF zA

"Maps for folding, unfolding all
nnoremap <LEADER>fu zM<CR>
nnoremap <LEADER>uf zR<CR>
