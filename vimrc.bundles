set nocompatible

call plug#begin('~/.vim/bundle')

" Define bundles via Github repos
Plug 'pbrisbin/vim-mkdir'

Plug 'w0rp/ale'
let g:ale_linters = {
      \ 'javascript': ['eslint']
      \ }
nmap <silent> [r <Plug>(ale_previous_wrap)
nmap <silent> ]r <Plug>(ale_next_wrap)

Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-ruby/vim-ruby'

Plug 'nanotech/jellybeans.vim'
Plug 'christoomey/vim-system-copy'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-rsi'
Plug 'nelstrom/vim-visual-star-search'
Plug 'tpope/vim-vinegar'

Plug 'vim-scripts/ingo-library'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'vim-scripts/ReplaceWithSameIndentRegister'

nmap <leader>gr "*gr
nmap <leader>gR "*gR

" Elixir
Plug 'elixir-lang/vim-elixir'

" JavaScript stuff
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0

" My local plugins, prototypes and/or testing against local branches
Plug '~/code/vim/trusted-local' " christoomey/vim-trusted-local
Plug '~/code/vim/quicklink' " christoomey/vim-quicklink
Plug '~/code/vim/sort-motion' " christoomey/vim-sort-motion
Plug '~/code/vim/titlecase' " christoomey/vim-titlecase
let g:titlecase_map_keys = 0
nmap <leader>gt <Plug>Titlecase
vmap <leader>gt <Plug>Titlecase
nmap <leader>gT <Plug>TitlecaseLine


Plug '~/code/vim/tmux-navigator' " Plug 'christoomey/vim-tmux-navigator'
Plug '~/code/vim/tmux-runner' " Plug 'christoomey/vim-tmux-runner'
nnoremap <leader>va :VtrAttachToPane<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>
noremap <C-f> :VtrSendLinesToRunner<cr>


Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
let g:fzf_files_options =
  \ '--reverse ' .
  \ '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
nnoremap <C-p> :Files<cr>
let $FZF_DEFAULT_COMMAND = 'ag -g "" --hidden'

let branch_files_options = { 'source': '( git status --porcelain | awk ''{print $2}''; git diff --name-only HEAD $(git merge-base HEAD master) ) | sort | uniq'}
let branch_files_options_develop = { 'source': '( git status --porcelain | awk ''{print $2}''; git diff --name-only HEAD $(git merge-base HEAD develop) ) | sort | uniq'}
command! BranchFiles call fzf#run(fzf#wrap('BranchFiles',
      \ extend(branch_files_options, { 'options': g:fzf_files_options }), 0))
command! BranchFilesDevelop call fzf#run(fzf#wrap('BranchFilesDevelop',
      \ extend(branch_files_options_develop, { 'options': g:fzf_files_options }), 0))
nnoremap <silent> <leader>gp :BranchFiles<cr>


nnoremap <leader>gm :Files app/models/<cr>
nnoremap <leader>gv :Files app/views/<cr>
nnoremap <leader>gc :Files app/controllers/<cr>
nnoremap <leader>gy :Files app/assets/stylesheets/<cr>
nnoremap <leader>gj :Files app/assets/javascripts/<cr>
nnoremap <leader>gs :Files spec/<cr>

function! s:all_help_files()
  return join(map(split(&runtimepath, ','), 'v:val ."\/doc\/tags"'), ' ')
endfunction
let full_help_cmd = "cat ". s:all_help_files() ." 2> /dev/null \| grep -i '^[a-z]' \| awk '{print $1}' \| sort"

nnoremap <silent> <leader>he :Helptags<cr>




Plug 'tpope/vim-commentary'


" CUSTOM TEXT OBJECTS!!!!!

Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-entire'


Plug 'gabebw/vim-spec-runner'
map <leader>t <Plug>RunFocusedSpec

Plug 'nelstrom/vim-markdown-folding'

Plug 'mattn/emmet-vim'
let g:user_emmet_leader_key = '<c-e>'


Plug 'mustache/vim-mustache-handlebars'

Plug '~/code/vim/conflicted' " christoomey/vim-conflicted
" set stl+=%{ConflictedVersion()}
nnoremap <leader>gnc :GitNextConflict<cr>

Plug 'mileszs/ack.vim'

nmap <LEADER>ck :Ack!<space>
nnoremap <leader>cc :cclose<cr>

function! s:VisualAck()
  let temp = @"
  normal! gvy
  let escaped_pattern = escape(@", "[]().*")
  let @" = temp
  execute "Ack! '" . escaped_pattern . "'"
endfunction

nnoremap K :Ack! '<C-r><C-w>'<cr>
vnoremap K :<C-u>call <sid>VisualAck()<cr>

let g:ackprg = 'ag --nogroup --nocolor --column'


Plug 'junegunn/vim-easy-align'
command! ReformatTable normal vip<cr>**|
nmap <leader>rt :ReformatTable<cr>
vmap <cr> <Plug>(EasyAlign)

" Folding configurations
"------------------------

"Enable indent folding
set foldenable
set foldmethod=indent
set foldlevel=999

" So I never use s, and I want a single key map to toggle folds, thus
" lower s = toggle <=> upper S = toggle recursive
nnoremap <leader>ff za
nnoremap <leader>FF zA

"Maps for folding, unfolding all
nnoremap <LEADER>fu zM<CR>
nnoremap <LEADER>uf zR<CR>

call plug#end()
