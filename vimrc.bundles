set nocompatible

call plug#begin('~/.vim/bundle')

" Define bundles via Github repos
Plug 'pbrisbin/vim-mkdir'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-ruby/vim-ruby'

Plug 'nanotech/jellybeans.vim'
Plug 'christoomey/vim-system-copy'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-rsi'
Plug 'nelstrom/vim-visual-star-search'
Plug 'tpope/vim-vinegar'

Plug 'vim-scripts/ingo-library'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'vim-scripts/ReplaceWithSameIndentRegister'

nmap <leader>gr "*gr
nmap <leader>gR "*gR


" My local plugins, prototypes and/or testing agains local branches
Plug '~/code/vim/quicklink' " christoomey/vim-quicklink

Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
nnoremap <leader>va :VtrAttachToPane<cr>
nnoremap <leader>fr :VtrFocusRunner<cr>
noremap <C-f> :VtrSendLinesToRunner<cr>


Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
let g:fzf_files_options =
  \ '--reverse ' .
  \ '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
nnoremap <silent> <C-p> :call fzf#run({
      \ 'source': 'ag -l --hidden',
      \ 'sink': 'e',
      \ 'options': g:fzf_files_options,
      \ 'down': '30%',
      \ })<cr>
nnoremap <leader>gm :Files app/models/<cr>
nnoremap <leader>gv :Files app/views/<cr>
nnoremap <leader>gc :Files app/controllers/<cr>
nnoremap <leader>gy :Files app/assets/stylesheets/<cr>
nnoremap <leader>gj :Files app/assets/javascripts/<cr>
nnoremap <leader>gs :Files spec/<cr>

function! s:all_help_files()
  return join(map(split(&runtimepath, ','), 'v:val ."\/doc\/tags"'), ' ')
endfunction
let full_help_cmd = "cat ". s:all_help_files() ." 2> /dev/null \| grep -i '^[a-z]' \| awk '{print $1}' \| sort"

nnoremap <silent> <leader>he :call fzf#run({
      \ 'source': full_help_cmd,
      \ 'sink': 'help',
      \ 'options': '--reverse',
      \ 'down': '50%',
      \ })<cr>

Plug 'tpope/vim-commentary'


" CUSTOM TEXT OBJECTS!!!!!

Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-entire'


Plug 'gabebw/vim-spec-runner'
map <leader>t <Plug>RunFocusedSpec

Plug 'nelstrom/vim-markdown-folding'


" Folding configurations
"------------------------

"Enable indent folding
set foldenable
set foldmethod=indent
set foldlevel=999

" So I never use s, and I want a single key map to toggle folds, thus
" lower s = toggle <=> upper S = toggle recursive
nnoremap <leader>ff za
nnoremap <leader>FF zA

"Maps for folding, unfolding all
nnoremap <LEADER>fu zM<CR>
nnoremap <LEADER>uf zR<CR>

call plug#end()
